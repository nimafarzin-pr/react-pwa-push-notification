{"ast":null,"code":"const vapidPublicKey = 'BDoDrobLJcJoM3g7U821ccGoaTRqwEfMuqkc7DeH1cDWhEHOXdQm_s9j3rIQLTxGM72sVDeMWPmQDsXnGsBKB9w';\n\n// Replace this with a dynamically injected Ngrok URL at build time\nconst serverBaseURL = 'http://localhost:3000';\nexport async function subscribeToNotifications() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/service-worker.js');\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)\n      });\n      await fetch(`${serverBaseURL}/subscribe`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(subscription)\n      });\n      await fetch(`${serverBaseURL}/send-notification`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Subscribed to notifications!');\n    } catch (error) {\n      console.error('Error subscribing to notifications:', error);\n    }\n  } else {\n    console.warn('Push messaging is not supported');\n  }\n}\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  return Uint8Array.from([...rawData].map(char => char.charCodeAt(0)));\n}","map":{"version":3,"names":["vapidPublicKey","serverBaseURL","subscribeToNotifications","navigator","registration","serviceWorker","register","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","fetch","method","headers","body","JSON","stringify","console","log","error","warn","base64String","padding","repeat","length","base64","replace","rawData","window","atob","Uint8Array","from","map","char","charCodeAt"],"sources":["/Users/nimaf/Desktop/my-pwa/src/notification/notification.js"],"sourcesContent":["const vapidPublicKey = 'BDoDrobLJcJoM3g7U821ccGoaTRqwEfMuqkc7DeH1cDWhEHOXdQm_s9j3rIQLTxGM72sVDeMWPmQDsXnGsBKB9w';\n\n// Replace this with a dynamically injected Ngrok URL at build time\nconst serverBaseURL = 'http://localhost:3000';\n\nexport async function subscribeToNotifications() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/service-worker.js');\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(vapidPublicKey),\n      });\n\n      await fetch(`${serverBaseURL}/subscribe`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(subscription),\n      });\n\n      await fetch(`${serverBaseURL}/send-notification`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      console.log('Subscribed to notifications!');\n    } catch (error) {\n      console.error('Error subscribing to notifications:', error);\n    }\n  } else {\n    console.warn('Push messaging is not supported');\n  }\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\n}\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,yFAAyF;;AAEhH;AACA,MAAMC,aAAa,GAAG,uBAAuB;AAE7C,OAAO,eAAeC,wBAAwBA,CAAA,EAAG;EAC/C,IAAI,eAAe,IAAIC,SAAS,EAAE;IAChC,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMD,SAAS,CAACE,aAAa,CAACC,QAAQ,CAAC,oBAAoB,CAAC;MACjF,MAAMC,YAAY,GAAG,MAAMH,YAAY,CAACI,WAAW,CAACC,SAAS,CAAC;QAC5DC,eAAe,EAAE,IAAI;QACrBC,oBAAoB,EAAEC,qBAAqB,CAACZ,cAAc;MAC5D,CAAC,CAAC;MAEF,MAAMa,KAAK,CAAC,GAAGZ,aAAa,YAAY,EAAE;QACxCa,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,YAAY;MACnC,CAAC,CAAC;MAEF,MAAMM,KAAK,CAAC,GAAGZ,aAAa,oBAAoB,EAAE;QAChDa,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MAEFI,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC,MAAM;IACLF,OAAO,CAACG,IAAI,CAAC,iCAAiC,CAAC;EACjD;AACF;AAEA,SAASV,qBAAqBA,CAACW,YAAY,EAAE;EAC3C,MAAMC,OAAO,GAAG,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,GAAIF,YAAY,CAACG,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC;EAC/D,MAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAO,EAAEI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC7E,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC;EACnC,OAAOK,UAAU,CAACC,IAAI,CAAC,CAAC,GAAGJ,OAAO,CAAC,CAACK,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}