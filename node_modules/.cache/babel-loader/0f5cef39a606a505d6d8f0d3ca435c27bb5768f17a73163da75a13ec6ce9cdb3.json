{"ast":null,"code":"/* eslint-disable no-restricted-globals */// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';clientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\n_ref=>{let{request,url}=_ref;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains // a file extension, skip.\nif(url.pathname.match(fileExtensionRegexp)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(// Add in any other file extensions or routing criteria as needed.\n_ref2=>{let{url}=_ref2;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[// Ensure that once this runtime cache reaches a maximum size the\n// least-recently used images are removed.\nnew ExpirationPlugin({maxEntries:50})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',event=>{if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});// Any other custom service worker logic can go here.\nif('serviceWorker'in navigator){navigator.serviceWorker.register('/service-worker.js').then(swReg=>{console.log('Service Worker Registered',swReg);swReg.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:'BDoDrobLJcJoM3g7U821ccGoaTRqwEfMuqkc7DeH1cDWhEHOXdQm_s9j3rIQLTxGM72sVDeMWPmQDsXnGsBKB9w'}).then(subscription=>console.log('Subscribed:',subscription)).catch(err=>console.error('Subscription failed:',err));});}self.addEventListener('push',event=>{console.log('Push message received:',event);console.log('Permission state:',Notification.permission);const data=event.data?JSON.parse(event.data.text()):{body:'No payload'};event.waitUntil(self.registration.showNotification('Test Notification',{body:data,icon:'/icon.png'}));});// self.addEventListener('push', (e) => {\n//   const data = e.data ? JSON.parse(e.data.text()) : { body: 'No payload' };  e.waitUntil(\n//     self.clients.matchAll({ type: 'window' }).then(function(clientList) {\n//       const client = clientList.find(c => c.visibilityState === 'visible') // <- This validation\n//       if (e.data && !client) {\n//         e.waitUntil(\n//           self.registration.showNotification('Test Notification', {\n//             body: data,\n//             icon: '/icon.png',\n//           })\n//         );      }\n//     })\n//   )\n// })","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","_ref","request","url","mode","pathname","startsWith","match","process","env","PUBLIC_URL","_ref2","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting","navigator","serviceWorker","register","then","swReg","console","log","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscription","catch","err","error","Notification","permission","JSON","parse","text","body","waitUntil","registration","showNotification","icon"],"sources":["/Users/nimaf/Desktop/my-pwa/src/service-worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\n\nimport { clientsClaim } from 'workbox-core';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate } from 'workbox-strategies';\n\n\nclientsClaim();\n\n// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);\n\n// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false;\n    } // If this is a URL that starts with /_, skip.\n\n    if (url.pathname.startsWith('/_')) {\n      return false;\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\n\n    if (url.pathname.match(fileExtensionRegexp)) {\n      return false;\n    } // Return true to signal that we want to use the handler.\n\n    return true;\n  },\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);\n\n// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(\n  // Add in any other file extensions or routing criteria as needed.\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [\n      // Ensure that once this runtime cache reaches a maximum size the\n      // least-recently used images are removed.\n      new ExpirationPlugin({ maxEntries: 50 }),\n    ],\n  })\n);\n\n// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n\n// Any other custom service worker logic can go here.\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/service-worker.js').then((swReg) => {\n    console.log('Service Worker Registered', swReg);\n    swReg.pushManager\n      .subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: 'BDoDrobLJcJoM3g7U821ccGoaTRqwEfMuqkc7DeH1cDWhEHOXdQm_s9j3rIQLTxGM72sVDeMWPmQDsXnGsBKB9w',\n      })\n      .then((subscription) => console.log('Subscribed:', subscription))\n      .catch((err) => console.error('Subscription failed:', err));\n  });\n}\n\n\nself.addEventListener('push', (event) => {\n  console.log('Push message received:', event);\n  console.log('Permission state:', Notification.permission);\n  \n  const data = event.data ? JSON.parse(event.data.text()) : { body: 'No payload' };\n  event.waitUntil(\n    self.registration.showNotification('Test Notification', {\n      body: data,\n      icon: '/icon.png',\n    })\n  );\n});\n\n\n\n// self.addEventListener('push', (e) => {\n//   const data = e.data ? JSON.parse(e.data.text()) : { body: 'No payload' };  e.waitUntil(\n//     self.clients.matchAll({ type: 'window' }).then(function(clientList) {\n//       const client = clientList.find(c => c.visibilityState === 'visible') // <- This validation\n//       if (e.data && !client) {\n//         e.waitUntil(\n//           self.registration.showNotification('Test Notification', {\n//             body: data,\n//             icon: '/icon.png',\n//           })\n//         );      }\n//     })\n//   )\n// })\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}